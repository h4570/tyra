; ______       ____   ___
;   |     \/   ____| |___|
;   |     |   |   \  |   |
;---------------------------------------------------------------
; Copyright 2022, tyra - https://github.com/h4570/tyra
; Licenced under Apache License 2.0
; Sandro Sobczy≈Ñski <sandro.sobczynski@gmail.com>
;
;---------------------------------------------------------------
; Triangle list
; Cull = Standard PS2 way. clipw polys are culled.
; Volors
;---------------------------------------------------------------

.syntax new
.name StdpipVU1Cull_C
.vu
.init_vf_all
.init_vi_all

#include "src/renderer/core/paths/path1/programs/vcl_sml.i"
#include "src/renderer/core/paths/path1/programs/tyra_macros.i"
#include "inc/renderer/3d/pipeline/std/core/path1/programs/stdpip_vu1_shared_defines.h"

#define RGBA_STORE_OFFSET   0
#define XYZ2_STORE_OFFSET   1

--enter
--endenter

#vuprog StdpipVU1CullC

    ResetClipFlags{ }
    LoadTyraStaticData{ gifSetTag }
    MatrixLoad{ mvp, VU1_MVP_MATRIX_ADDR, vi00 }
    LoadTyraSingleColor{ singleColor, singleColorEnabled, VU1_SINGLE_COLOR_ADDR, VU1_OPTIONS_ADDR }
    LoadTyraTags{ lodGifTag, texBufferClutGifTag, VU1_LOD_ADDR, VU1_CLUT_ADDR }

begin:
    xtop buffer
    LoadTyraBufferTags{ scale, primTag, buffer }

    iaddiu  vertexData,         buffer,         VU1_VERT_DATA_ADDR
    ilw.w   vertexCount,        0(buffer)
    iadd    colorData,          vertexData,     vertexCount
    iblez   singleColorEnabled, setDestAddrMultiColor
    iadd    kickAddress,        vertexData,     vertexCount
    b       setDestAddr
setDestAddrMultiColor:
    iadd    kickAddress,        colorData,      vertexCount
setDestAddr:
    iaddiu  destAddress,        kickAddress,    0

    StoreTyraGifTags{ gifSetTag, lodGifTag, texBufferClutGifTag, primTag, destAddress }

    ;--- Loop
    iadd vertexCounter, buffer, vertexCount
vertexLoop:

        iblez  singleColorEnabled, multiColor
        ;--- Load vertices single color
        add      color1,    vf00,   singleColor
        add      color2,    vf00,   singleColor
        add      color3,    vf00,   singleColor
        b processing

multiColor:
        ;--- Load vertices colors
        lq      color1,   (colorData)
        lq      color2,   1(colorData)
        lq      color3,   2(colorData)
        
processing:
        ;--- Load vertex1
        lq      vertex1,  (vertexData)

        ;--- Load vertex2
        lq      vertex2,  1(vertexData)

        ;--- Load vertex3
        lq      vertex3,  2(vertexData)

        ;--- Calculate vertex1
        MatrixMultiplyVertex{ vertex1, mvp, vertex1 }
        PerformClipCheck{ vertex1, destAddress, XYZ2_STORE_OFFSET }
        VertexPersCorr{ vertex1, vertex1 }
        ScaleVertexToGSFormat{ scale, vertex1 }
        FixColor{ color1 }

        ;--- Calculate vertex2
        MatrixMultiplyVertex{ vertex2, mvp, vertex2 }
        PerformClipCheck{ vertex2, destAddress, XYZ2_STORE_OFFSET+2 }
        VertexPersCorr{ vertex2, vertex2 }
        ScaleVertexToGSFormat{ scale, vertex2 }
        FixColor{ color2 }
    
        ;--- Calculate vertex3
        MatrixMultiplyVertex{ vertex3, mvp, vertex3 }
        PerformClipCheck{ vertex3, destAddress, XYZ2_STORE_OFFSET+4 }
        VertexPersCorr{ vertex3, vertex3 }
        ScaleVertexToGSFormat{ scale, vertex3 }
        FixColor{ color3 }

        ;--- Store vertex1 
        sq      color1,         RGBA_STORE_OFFSET(destAddress)
        sq.xyz  vertex1,        XYZ2_STORE_OFFSET(destAddress)

        ;--- Store vertex2
        sq      color2,         RGBA_STORE_OFFSET+2(destAddress)
        sq.xyz  vertex2,        XYZ2_STORE_OFFSET+2(destAddress)

        ;--- Store vertex3
        sq      color3,         RGBA_STORE_OFFSET+4(destAddress)
        sq.xyz  vertex3,        XYZ2_STORE_OFFSET+4(destAddress)

        ;-------------------------------

        iaddiu  vertexData,     vertexData,     3      
        iaddiu  colorData,      colorData,      3  
        iaddiu  destAddress,    destAddress,    6

        ;--- Fix loop
        iaddi   vertexCounter,  vertexCounter,  -3  ; decrement the loop counter 
        ibne    vertexCounter,  buffer, vertexLoop  ; and repeat if needed

    xgkick kickAddress ; dispatch to the GS rasterizer.

--barrier ; Why the hell I must add barrier AFTER XGKICK? VCL does not adds E bit without it...
--cont

    b   begin

#endvuprog

--exit
--endexit
