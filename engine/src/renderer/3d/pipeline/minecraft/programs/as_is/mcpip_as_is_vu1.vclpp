; ______       ____   ___
;   |     \/   ____| |___|
;   |     |   |   \  |   |
;---------------------------------------------------------------
; Copyright 2022, tyra - https://github.com/h4570/tyra
; Licenced under Apache License 2.0
; Sandro Sobczy≈Ñski <sandro.sobczynski@gmail.com>
;
;---------------------------------------------------------------
; Super fast renderer of minecraft blocks.
; Block data is statically allocated in vi00
;
; - Triangle list
; - AsIs = NO TRANSFORM
; - Colors
;---------------------------------------------------------------

.syntax new
.name VU1BlocksAsIs
.vu
.init_vf_all
.init_vi_all

#include "src/renderer/core/paths/path1/programs/vcl_sml.i"
#include "inc/renderer/3d/pipeline/minecraft/programs/as_is/mcpip_vu1_as_is_shared_defines.h"
#include "src/renderer/3d/pipeline/minecraft/programs/as_is/macros.i"

#define STQ_STORE_OFFSET    0
#define RGBA_STORE_OFFSET   1
#define XYZ2_STORE_OFFSET   2

--enter
--endenter

#vuprog VU1BlocksAsIs

    LoadStaticData{ lodTag, setTag }

begin:

    xtop buffer
    LoadDynamicData{ scale, primTag, clut, color, vertexCount, buffer }

    iaddiu  vertexData,         buffer,         VU1_MCPIP_AS_IS_DYNAMIC_VERTEX_DATA_ADDR
    iadd    stqData,            vertexData,     vertexCount
    iadd    destAddress,        stqData,        vertexCount
    iadd    kickAddress,        stqData,        vertexCount

    StoreTags{ lodTag, setTag, primTag, clut, destAddress }
    FixColor{ color }

    ;--- Loop
    iadd vertexCounter, buffer, vertexCount
vertexLoop:

        ;--- Load vertex1
        lq      vertex1,  (vertexData)
        lq      stq1,     (stqData)

        ;--- Load vertex2
        lq      vertex2,  1(vertexData)
        lq      stq2,     1(stqData)

        ;--- Load vertex3
        lq      vertex3,  2(vertexData)
        lq      stq3,     2(stqData)

        ;--- Calculate vertex1
        ScaleVertexToGSFormat{ scale, vertex1 }
        div q,  vf00[w],    vertex1[w]
        PerformTexturePerspectiveCorrection{ outputStq1, stq1 }

        ;--- Calculate vertex2
        ScaleVertexToGSFormat{ scale, vertex2 }
        div q,  vf00[w],    vertex2[w]
        PerformTexturePerspectiveCorrection{ outputStq2, stq2 }

        ;--- Calculate vertex3
        ScaleVertexToGSFormat{ scale, vertex3 }
        div q,  vf00[w],    vertex3[w]
        PerformTexturePerspectiveCorrection{ outputStq3, stq3 }

        ;--- Store vertex1
        sq      outputStq1,     STQ_STORE_OFFSET(destAddress)
        sq      color,          RGBA_STORE_OFFSET(destAddress)
        sq.xyz  vertex1,        XYZ2_STORE_OFFSET(destAddress)

        ;--- Store vertex2
        sq      outputStq2,     STQ_STORE_OFFSET+3(destAddress)
        sq      color,          RGBA_STORE_OFFSET+3(destAddress)
        sq.xyz  vertex2,        XYZ2_STORE_OFFSET+3(destAddress)

        ;--- Store vertex3
        sq      outputStq3,     STQ_STORE_OFFSET+6(destAddress)
        sq      color,          RGBA_STORE_OFFSET+6(destAddress)
        sq.xyz  vertex3,        XYZ2_STORE_OFFSET+6(destAddress)

        ;-------------------------------

        iaddiu  vertexData,     vertexData,     3                         
        iaddiu  stqData,        stqData,        3  
        iaddiu  destAddress,    destAddress,    9

        ;--- Fix loop
        iaddi   vertexCounter,  vertexCounter,  -3  ; decrement the loop counter 
        ibne    vertexCounter,  buffer, vertexLoop  ; and repeat if needed

    xgkick kickAddress ; dispatch to the GS rasterizer.

--barrier ; Why the hell I must add barrier AFTER XGKICK? VCL does not adds E bit without it...
--cont

    b   begin

#endvuprog

--exit
--endexit
