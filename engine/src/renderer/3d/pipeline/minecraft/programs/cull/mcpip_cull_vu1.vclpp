; ______       ____   ___
;   |     \/   ____| |___|
;   |     |   |   \  |   |
;---------------------------------------------------------------
; Copyright 2022, tyra - https://github.com/h4570/tyra
; Licenced under Apache License 2.0
; Sandro Sobczy≈Ñski <sandro.sobczynski@gmail.com>
;
;---------------------------------------------------------------
; Super fast renderer of minecraft blocks.
; Block data is statically allocated in vi00
;
; - Triangle list
; - Cull = transform
; - Colors
;---------------------------------------------------------------

.syntax new
.name VU1BlocksCull
.vu
.init_vf_all
.init_vi_all

#include "src/renderer/core/paths/path1/programs/vcl_sml.i"
#include "inc/renderer/3d/pipeline/minecraft/programs/cull/mcpip_vu1_cull_shared_defines.h"
#include "src/renderer/3d/pipeline/minecraft/programs/cull/macros.i"

#define STQ_STORE_OFFSET    0
#define RGBA_STORE_OFFSET   1
#define XYZ2_STORE_OFFSET   2

--enter
--endenter

#vuprog VU1BlocksCull

GetVertAndStData{ staticVertexData, staticStqData }
ResetClipFlags{ }

begin:

xtop        buffer
iaddiu      blockData,  buffer, VU1_MCPIP_CULL_DYNAMIC_BLOCKS_DATA
LoadBufferDynamicData{ buffer, scale, clutTex, blocksCount, viewProj }

;--- Loop
iadd    blockCounter,   buffer, blocksCount

blocksLoop:

    GetBlockData{ blockData, model, color, stOffset }
    MatrixMultiply{ mvp, model, viewProj }
    FixColor{ color }
    GetDestinationAddress{ destAddress, kickAddress }
    StoreBlockizerLodClutTexPrim{ destAddress, clutTex }
    iaddiu      vertexData,     staticVertexData,   0
    iaddiu      stqData,        staticStqData,      0

    iaddiu vertexCounter, buffer, VU1_MCPIP_CULL_VERTEX_COUNT
vertexLoop:

        GetVertexData{ vertexData, stqData, vertex1, stq1, 0 }
        GetVertexData{ vertexData, stqData, vertex2, stq2, 1 }
        GetVertexData{ vertexData, stqData, vertex3, stq3, 2 }

        ;--- Calculate vertex1
        MatrixMultiplyVertex{ vertex1, mvp, vertex1 }
        PerformClipCheck{ vertex1, destAddress, XYZ2_STORE_OFFSET }
        VertexPersCorr{ vertex1, vertex1 }
        ScaleVertexToGSFormat{ scale, vertex1 }
        AddSTOffset{ stq1, stOffset }
        PerformTexturePerspectiveCorrection{ outputStq1, stq1 }

        ;--- Calculate vertex2
        MatrixMultiplyVertex{ vertex2, mvp, vertex2 }
        PerformClipCheck{ vertex2, destAddress, XYZ2_STORE_OFFSET+3 }
        VertexPersCorr{ vertex2, vertex2 }
        ScaleVertexToGSFormat{ scale, vertex2 }
        AddSTOffset{ stq2, stOffset }
        PerformTexturePerspectiveCorrection{ outputStq2, stq2 }
        
        ;--- Calculate vertex3
        MatrixMultiplyVertex{ vertex3, mvp, vertex3 }
        PerformClipCheck{ vertex3, destAddress, XYZ2_STORE_OFFSET+6 }
        VertexPersCorr{ vertex3, vertex3 }
        ScaleVertexToGSFormat{ scale, vertex3 }
        AddSTOffset{ stq3, stOffset }
        PerformTexturePerspectiveCorrection{ outputStq3, stq3 }

        ;--- Store vertex1 
        sq      outputStq1,     STQ_STORE_OFFSET(destAddress)
        sq      color,          RGBA_STORE_OFFSET(destAddress)
        sq.xyz  vertex1,        XYZ2_STORE_OFFSET(destAddress)

        ;--- Store vertex2
        sq      outputStq2,     STQ_STORE_OFFSET+3(destAddress)
        sq      color,          RGBA_STORE_OFFSET+3(destAddress)
        sq.xyz  vertex2,        XYZ2_STORE_OFFSET+3(destAddress)

        ;--- Store vertex3
        sq      outputStq3,     STQ_STORE_OFFSET+6(destAddress)
        sq      color,          RGBA_STORE_OFFSET+6(destAddress)
        sq.xyz  vertex3,        XYZ2_STORE_OFFSET+6(destAddress)

        iaddiu  vertexData,     vertexData,     3                         
        iaddiu  stqData,        stqData,        3  
        iaddiu  destAddress,    destAddress,    9

        iaddi   vertexCounter,  vertexCounter,  -3
        ibne    vertexCounter,  buffer,         vertexLoop
        ; End of vertex loop

--barrier

    xgkick  kickAddress

    iaddiu  blockData,      blockData,      VU1_MCPIP_CULL_QWORDS_PER_BLOCK  
    iaddi   blockCounter,   blockCounter,   -1
    ibne    blockCounter,   buffer,         blocksLoop
    ; End of block loop

--cont

b begin

#endvuprog

--exit
--endexit
